{"version":3,"sources":["components/Grid/index.js","components/Header/index.js","components/jumbotron/index.js","components/thumbnail/index.js","components/character.js","App.js","serviceWorker.js","index.js"],"names":["Container","fluid","children","className","Header","props","class","href","count","topcount","Jumbotron","Thumbnail","ischecked","status","value","id","role","aria-label","onClick","handleChange","style","backgroundImage","src","CharactersContainer","state","characters","selected","functionSort","sort","Math","random","findId","userid","console","log","find","item","topScore","countNew","alert","setState","event","preventDefault","currentTarget","dataset","this","map","character","key","data-id","img","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+5BAKO,SAASA,EAAT,GAAyC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACjC,OAAO,yBAAKC,UAAS,mBAAcF,EAAQ,SAAW,KAAOC,G,MCiBhDE,MAnBf,SAAgBC,GAEd,OACG,yBAAKC,MAAM,mBACN,yBAAKH,UAAU,0BACb,yBAAKA,UAAU,UACf,uBAAGI,KAAK,KAAR,gBAEA,yBAAKJ,UAAU,UAAf,4BAGA,yBAAKA,UAAU,UACf,yCAAeE,EAAMG,MAArB,gBAAyCH,EAAMI,c,MCF5CC,MAXf,WACE,OACE,yBAAKP,UAAU,yBACb,4CACA,wG,MCiBSQ,MAlBf,SAAmBN,GAEjB,OACE,yBACEF,UAAU,6BACVS,UAAWP,EAAMO,UACjBC,OAAQR,EAAMS,MACdC,GAAIV,EAAMU,GACVC,KAAK,MACLC,aAAW,aACXC,QAASb,EAAMc,aACfC,MAAO,CACLC,gBAAgB,OAAD,OAAShB,EAAMiB,IAAf,SCmFRC,E,2MA5FfC,MAAQ,CACNC,aACAC,SAAU,GACVlB,MAAO,EACPC,SAAU,EACVG,UAAW,G,EAKbe,aAAe,SAACF,GAId,OAFAA,EAAaA,EAAWG,MAAK,kBAAMC,KAAKC,SAAW,O,EAMrDC,OAAS,SAACL,EAAUM,GAMlB,GALDC,QAAQC,IAAIR,GAKPA,EAASS,MAJb,SAAoBC,GAClB,OAAOA,IAASJ,KAGa,CAC9B,IAAIK,EAAW,EAAKb,MAAMf,SACtB6B,EAAW,EAAKd,MAAMhB,MACrB,OAAK6B,EAAWC,GAEdC,MAAM,aACN,EAAKC,SAAS,CACZhC,MAAO,EACPC,SAAU,EAAKe,MAAMf,WAEH,KAIpB8B,MAAM,aACN,EAAKC,SAAS,CACZhC,MAAO,EACPC,SAAU6B,IAEQ,IAQ3B,OAJCZ,EAAQ,sBAAQA,GAAR,CAAkBM,IAC1B,EAAKQ,SAAS,CACdhC,MAAO,EAAKgB,MAAMhB,MAAQ,IAEnBkB,G,EAOXP,aAAe,SAACsB,GACdA,EAAMC,iBAEJ,EAAKF,SAAS,CACZd,SAAU,EAAKK,OAAO,EAAKP,MAAME,SAAUe,EAAME,cAAcC,QAAQ7B,IACvEH,UAAW6B,EAAME,cAAcC,QAAQ7B,GACvCU,WAAY,EAAKE,aAAa,EAAKH,MAAMC,e,wEAIrC,IAAD,OAEP,OACE,6BACD,kBAAC,EAAD,CAAQjB,MAAOqC,KAAKrB,MAAMhB,MAAOC,SAAUoC,KAAKrB,MAAMf,WACrD,kBAAC,EAAD,MACA,kBAACT,EAAD,KACG6C,KAAKrB,MAAMC,WAAWqB,KAAI,SAAAC,GAEzB,OAEE,yBAAMC,IAAKD,EAAUhC,GAAIG,QAAS,EAAKC,aAAc8B,UAASF,EAAUhC,IACxE,kBAAC,EAAD,CAAWO,IAAKyB,EAAUG,IAAKnC,GAAIgC,EAAUhC,GAAIH,UAAW,EAAKY,MAAMZ,WAAamC,EAAUhC,GAAK,IAAM,gB,GAjFjFoC,aCWnBC,E,iLARb,OAEC,kBAAC,EAAD,U,GAPeD,aCMEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3bfda59d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// Exporting the Container, Row, and Col components from this file\r\n\r\n// This Container component allows us to use a bootstrap container without worrying about class names\r\nexport function Container({ fluid, children }) {\r\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Row component lets us use a bootstrap row without having to think about class names\r\nexport function Row({ fluid, children }) {\r\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Col component lets us size bootstrap columns with less syntax\r\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\r\nexport function Col({ size, children }) {\r\n  return (\r\n    <div\r\n      // className={size\r\n      //   .split(\" \")\r\n      //   .map(size => \"col-\" + size)\r\n      //   .join(\" \")}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction Header(props) {\r\n\r\n  return (\r\n     <div class=\"container-fluid\">\r\n          <nav className=\"navbar container-fluid\">  \r\n            <div className='header'>\r\n            <a href=\"/\">Clicky Game</a>\r\n            </div>\r\n            <div className='header'>\r\n            Click an image to begin!\r\n            </div >\r\n            <div className='header'> \r\n            <span> Score: {props.count} |Top Score: {props.topcount}</span>\r\n            </div>\r\n        </nav>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron() {\r\n  return (\r\n    <div className=\"jumbotron text-center\">\r\n      <h1>Clicky Game!</h1>\r\n      <p >\r\n        Click on an image to earn point, but don't click on any more than once!\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// The Thumbnail component renders a div that uses some CSS to render a background image\r\n// It will always keep square proportions at any size without the image warping\r\n// The \"role\" and \"aria label\" are there to identify the element's purpose as an image for accessibility purposes\r\nfunction Thumbnail(props) {\r\n\r\n  return (\r\n    <div \r\n      className=\"thumbnail click-item shake\"\r\n      ischecked={props.ischecked}\r\n      status={props.value}\r\n      id={props.id}\r\n      role=\"img\"\r\n      aria-label=\"click item\"\r\n      onClick={props.handleChange}\r\n      style={{\r\n        backgroundImage: `url(${props.src})`\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Thumbnail;","import React, { Component } from \"react\";\r\nimport characters from '../characters.json';\r\nimport {Container} from './Grid';\r\nimport Header from './Header';\r\nimport Jumbotron from './jumbotron';\r\nimport Thumbnail from './thumbnail';\r\n\r\n\r\nclass CharactersContainer extends Component {\r\nstate = {\r\n  characters,\r\n  selected: [],\r\n  count: 0,\r\n  topcount: 0,\r\n  ischecked: 0\r\n}\r\n\r\n\r\n\r\nfunctionSort = (characters) => {\r\n  \r\n  characters = characters.sort(() => Math.random() - 0.5)\r\n\r\n  return characters\r\n}\r\n\r\n\r\nfindId = (selected, userid) => {\r\n console.log(selected)\r\n  function isSelected(item) {\r\n    return item === userid;\r\n  }\r\n  \r\n  if (selected.find(isSelected)) {\r\n   let topScore = this.state.topcount\r\n   let countNew = this.state.count\r\n        if ( topScore > countNew) {\r\n\r\n          alert('Game Over')\r\n          this.setState({\r\n            count: 0,\r\n            topcount: this.state.topcount\r\n            })\r\n          return  (selected = [])\r\n          \r\n          \r\n        } else {\r\n          alert('Game Over')\r\n          this.setState({\r\n            count: 0,\r\n            topcount: countNew\r\n            })\r\n          return  (selected = [])\r\n        }    \r\n    \r\n  } else {\r\n    selected = [ ...selected, userid ]\r\n    this.setState({\r\n    count: this.state.count + 1\r\n    })\r\n   return  selected  \r\n  }\r\n\r\n}\r\n  \r\n\r\n\r\nhandleChange = (event) => {\r\n  event.preventDefault();\r\n\r\n    this.setState({\r\n      selected: this.findId(this.state.selected, event.currentTarget.dataset.id),\r\n      ischecked: event.currentTarget.dataset.id,\r\n      characters: this.functionSort(this.state.characters)\r\n     })       \r\n}\r\n\r\nrender() {\r\n  \r\n  return (\r\n    <div>\r\n   <Header count={this.state.count} topcount={this.state.topcount} />\r\n    <Jumbotron />\r\n    <Container>\r\n      {this.state.characters.map(character => {     \r\n       \r\n        return(       \r\n            \r\n          <div  key={character.id} onClick={this.handleChange} data-id={character.id}  >\r\n          <Thumbnail src={character.img} id={character.id} ischecked={this.state.ischecked == character.id ? '1' : '0' } />\r\n        </div>\r\n        )\r\n      }  \r\n    )}\r\n  </ Container>\r\n  </div>\r\n  ) \r\n }\r\n}\r\n\r\n\r\nexport default CharactersContainer;","  \nimport React, { Component } from \"react\";\nimport CharactersContainer from \"./components/character\"\n\n\n\nclass App extends Component {\n\n \n\nrender() {\n  return (\n  \n   <CharactersContainer />\n   \n    )}\n\n  }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}